library (compGenomRData)
> 
> #Read CpG island data as shown below for the rest of the exercises.
> 
> cpgtFilePath=system.file("extdata",
+                          "CpGi.table.hg18.txt",
+                          package="compGenomRData")
> cpgi=read.table(cpgtFilePath,header=TRUE,sep="\t")
> head(cpgi)
  chrom chromStart chromEnd     name length cpgNum gcNum perCpg perGc obsExp
1  chr1      18598    19673 CpG: 116   1075    116   787   21.6  73.2   0.83
2  chr1     124987   125426  CpG: 30    439     30   295   13.7  67.2   0.64
3  chr1     317653   318092  CpG: 29    439     29   295   13.2  67.2   0.62
4  chr1     427014   428027  CpG: 84   1013     84   734   16.6  72.5   0.64
5  chr1     439136   440407  CpG: 99   1271     99   777   15.6  61.1   0.84
6  chr1     523082   523977  CpG: 94    895     94   570   21.0  63.7   1.04
> 
> #1.Check values in the perGc column using a histogram. The ‘perGc’ column in the data stands for GC percent => percentage of C+G nucleotides. [Difficulty: Beginner]
> hist(cpgi$perGc)
> 
> #2.Make a boxplot for the ‘perGc’ column. [Difficulty: Beginner]
> boxplot(cpgi$perGc)
> 
> #3.Use if/else structure to decide if the given GC percent is high, low or medium. If it is low, high, or medium: low < 60, high>75, medium is between 60 and 75; use greater or less than operators, < or >. Fill in the values in the code below, where it is written ‘YOU_FILL_IN’. [Difficulty: Intermediate]
> 
> GCper=65
> 
> # check if GC value is lower than 60, 
> # assign "low" to result
> if(GCper<60){
+   result="low"
+   cat("low")
+ }else if(GCper>75){  # check if GC value is higher than 75,      
+   #assign "high" to result
+   result="high"
+   cat("high")
+ }else{ # if those two conditions fail then it must be "medium"
+   result="medium"
+ }
> 
> result
[1] "medium"
> 
> #4. Write a function that takes a value of GC percent and decides if it is low, high, or medium: low < 60, high>75, medium is between 60 and 75. Fill in the values in the code below, where it is written ‘YOU_FILL_IN’. [Difficulty: Intermediate/Advanced]
> 
> GCclass<-function(my.gc){
+   
+   if(my.gc<60){
+   result="low"
+  
+ }else if(my.gc>75){
+   result="high"
+   
+ }else{
+   result="medium"
+ }
+   return(result)
+ }
> 
> GCclass(10) # should return "low"
[1] "low"
> GCclass(90) # should return "high"
[1] "high"
> GCclass(65) # should return "medium"
[1] "medium"
> 
> #5. Use a for loop to get GC percentage classes for gcValues below. Use the function you wrote above.[Difficulty: Intermediate/Advanced]
> 
> 
> gcValues=c(10,50,70,65,90)
> for( i in gcValues){
+   
+   print(GCclass(i) )
+ }
[1] "low"
[1] "low"
[1] "medium"
[1] "medium"
[1] "high"
> 
> 
> #6. Use lapply to get GC percentage classes for gcValues. [Difficulty: Intermediate/Advanced]
> vec=c(1,2,4,5)
> power2=function(x){ return(x^2)  }
> lapply(vec,power2)
[[1]]
[1] 1

[[2]]
[1] 4

[[3]]
[1] 16

[[4]]
[1] 25

> 
> l=lapply(gcValues, GCclass)
> l
[[1]]
[1] "low"

[[2]]
[1] "low"

[[3]]
[1] "medium"

[[4]]
[1] "medium"

[[5]]
[1] "high"

> 
> #7. Use sapply to get values to get GC percentage classes for gcValues. [Difficulty: Intermediate]
> 
> s=sapply(gcValues, GCclass)
> s
[1] "low"    "low"    "medium" "medium" "high"  
> 
> #8. Is there a way to decide on the GC percentage class of a given vector of GCpercentages without using if/else structure and loops ? if so, how can you do it? HINT: Subsetting using < and > operators. [Difficulty: Intermediate]
> 
> gcValues=c(10,50,70,65,90)
> result=rep("low",length(gcValues) )
> result[gcValues > 75]="high"
> result[gcValues < 75 & gcValues > 60 ] = "medium"
> result
[1] "low"    "low"    "medium" "medium" "high"  
> 
